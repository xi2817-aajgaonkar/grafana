apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "postgres-storage-grafana"
  namespace: db
  labels:
    app: postgres-grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "2Gi"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: postgres-grafana
  name: postgres-grafana
  namespace: db
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: postgres-grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: postgres-grafana
    spec:
      containers:
      - env:
        - name: PGDATA
          value: /var/lib/postgresql/data/sub-dir/
        - name: POSTGRES_USER
          value: admin
        - name: POSTGRES_PASSWORD
          value: mysecretpassword
        image: "postgres:latest"
        imagePullPolicy: Always
        name: "postgres"
        ports:
        - containerPort: 5432
          protocol: TCP
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        # - mountPath: /docker-entrypoint-initdb.d/create_tables.sql
        #   name: create-tables
        #   subPath: create_tables.sql
        - mountPath: /var/lib/postgresql/data
          name: "postgres-storage"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      # - name: create-tables
      #   configMap:
      #     name: postgres-init-grafana
      - name: "postgres-storage"
        persistentVolumeClaim:
          claimName: "postgres-storage-grafana"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: postgres-grafana
  name: postgres-grafana
  namespace: db
spec:
  ports:
  - port: 5432
    protocol: TCP
    targetPort: 5432
  selector:
    app: postgres-grafana
  sessionAffinity: None
  type: ClusterIP
